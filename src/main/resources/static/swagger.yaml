openapi: 3.0.0
info:
  title: Comment-part API
  version: 1.0.0
paths:
  /comments/{newsId}:
    post:
      summary: Create comment
      parameters:
        - name: newsId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequestDto'
            examples:
              example1:
                value:
                  text: "Example Comment Text"
                  username: "Example Username"
                  newsId: 1
      responses:
        '201':
          description: Comment successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponseDto'
              examples:
                example1:
                  value:
                    id: 1
                    time: "2024-03-04T20:15:41.3008788"
                    updateTime: "2024-03-04T20:15:41.3008788"
                    text: "Example Comment Text"
                    username: "Example Username"
                    newsId: 1
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
              examples:
                missingText:
                  value:
                    timestamp: "2024-03-04T21:44:29.7909011"
                    status: 400
                    error: "Validation error"
                    message: "Error in field 'text': Text cannot be blank"
        '404':
          description: News not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /comments/{id}:
    get:
      summary: Get comment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponseDto'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    put:
      summary: Update comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequestDto'
      responses:
        '200':
          description: Comment successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponseDto'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    delete:
      summary: Delete comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comment successfully deleted
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /comments:
    get:
      summary: Get all comments
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page for pagination
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommentResponseDto'
  /comments/news/{newsId}:
    delete:
      summary: Delete comments by news ID
      description: Endpoint for internal use by feign client. It does not check for the existence of the news before execution. This check is handled by the class calling this method.
      parameters:
        - name: newsId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comments successfully deleted
        '404':
          description: Comments not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    get:
      summary: Get comments by news ID
      description: Endpoint for internal use by feign client. It does not check for the existence of the news before execution. This check is handled by the class calling this method.
      parameters:
        - name: newsId
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page for pagination
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommentResponseDto'

components:
  schemas:
    CommentRequestDto:
      type: object
      properties:
        text:
          type: string
          example: "Example Comment Text"
        username:
          type: string
          example: "Example Username"
        newsId:
          type: integer
          example: 1
    CommentResponseDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        time:
          type: string
          format: date-time
          example: "2024-03-04T20:15:41.3008788"
        updateTime:
          type: string
          format: date-time
          example: "2024-03-04T20:15:41.3008788"
        text:
          type: string
          example: "Example Comment Text"
        username:
          type: string
          example: "Example Username"
        newsId:
          type: integer
          example: 1
    ErrorDto:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-03-04T21:50:11.8911256"
        status:
          type: integer
          example: 404
        error:
          type: string
          example: "Not Found"
        message:
          type: string
          example: "Comment with id 111 does not exist"

